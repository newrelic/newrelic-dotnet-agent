<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <AssemblyName>NewRelic.OpenTracing.AmazonLambda.Tracer</AssemblyName>
    <RootNamespace>NewRelic.OpenTracing.AmazonLambda</RootNamespace>
    <Description></Description>
    <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Amazon.Lambda.Core" Version="1.0.0" />
    <PackageReference Include="Amazon.Lambda.Serialization.Json" Version="1.1.0" />
    <PackageReference Include="OpenTracing" Version="0.12.0" />
    <PackageReference Include="ILRepack" Version="2.0.16" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\..\NewRelic.Core\NewRelic.Core.csproj" />
    <ProjectReference Include="..\AwsLambdaWrapper\Wrapper.csproj" />
  </ItemGroup>

  <Target Name="ILRepack" AfterTargets="Build" Condition="'$(TargetFramework)' != ''">
    <ItemGroup>
      <PossibleRefsForILRepack Include="$(OutputPath)*.dll" />
    </ItemGroup>

    <ItemGroup>
      <ILRepackInclude Include="@(PossibleRefsForILRepack)" Condition="'%(FileName)' == 'NewRelic.Core'" />
      <ILRepackInclude Include="@(PossibleRefsForILRepack)" Condition="'%(FileName)' == 'Newtonsoft.Json'" />
    </ItemGroup>

    <PropertyGroup>
      <ILRepackIncludeCount>2</ILRepackIncludeCount>
    </PropertyGroup>

    <Error Text="ILRepack of $(AssemblyName) ($(TargetFramework)) failed. A dependency is missing. Expected $(ILRepackIncludeCount) dependencies but found @(ILRepackInclude-&gt;Count())." Condition="@(ILRepackInclude-&gt;Count()) != $(ILRepackIncludeCount)" />

    <ItemGroup>
      <ILRepackExclude Include="@(PossibleRefsForILRepack)" Exclude="@(ILRepackInclude)" />
    </ItemGroup>

    <Message Importance="High" Text="ILRepack Include: %(ILRepackInclude.FullPath)" />
    <Message Importance="High" Text="ILRepack Exclude: %(ILRepackExclude.FullPath)" />

    <PropertyGroup>
      <ILRepackSearchDirOutputPath>$([System.String]::new("$(OutputPath)").Trim('\'))</ILRepackSearchDirOutputPath>
    </PropertyGroup>

    <PropertyGroup>
      <ILRepackCommand>"$(ILRepack)" --parallel --internalize --norepackres --keepotherversionreferences --keyfile:"$(AssemblyOriginatorKeyFile)" --lib:"$(ILRepackSearchDirOutputPath)" --out:"$(OutputPath)..\$(TargetFramework)-ILRepacked\$(AssemblyName).dll" "$(TargetPath)" "@(ILRepackInclude, '" "')"</ILRepackCommand>
    </PropertyGroup>

    <Message Importance="High" Text="Executing ILRepack.exe for $(TargetFramework) build: $(ILRepackCommand)" />
    <Exec Command="$(ILRepackCommand)" />
  </Target>

  <Target Name="ILRepackLambdaWrapper" AfterTargets="ILRepack" Condition="'$(TargetFramework)' != ''">
    <!-- We currently only want to publish one nuget package for AWS Lambda support. Technically we should be able to publish a
         package that has multiple dlls in it - the OpenTracer dll and the LambdaWrapper dll. However, when we create a single package with
         two dlls in it we have problems when referencing this package and running a function using the AWS Mock Lambda Test Tool.

         See: https://github.com/aws/aws-lambda-dotnet/issues/419

         To remedy this, the OpenTracer project references the LambdaWrapper project and then we ILRepack the LambdaWrapper project into the OpenTracer.
         Note that the ILRepack command we run here does not internalize the types exposed in by the LambdaWrapper project. -->

    <ItemGroup>
      <LambdaWrapperILRepackInclude Include="@(PossibleRefsForILRepack)" Condition="'%(FileName)' == 'NewRelic.OpenTracing.AmazonLambda.Wrapper'" />
    </ItemGroup>

    <PropertyGroup>
      <LambdaWrapperILRepackCommand>"$(ILRepack)" --parallel --norepackres --keepotherversionreferences --keyfile:"$(AssemblyOriginatorKeyFile)" --lib:"$(ILRepackSearchDirOutputPath)" --out:"$(OutputPath)..\$(TargetFramework)-ILRepacked\$(AssemblyName).dll" "$(OutputPath)..\$(TargetFramework)-ILRepacked\$(AssemblyName).dll" "@(LambdaWrapperILRepackInclude, '" "')"</LambdaWrapperILRepackCommand>
    </PropertyGroup>

    <Message Importance="High" Text="Executing ILRepack.exe for $(TargetFramework) build: $(LambdaWrapperILRepackCommand)" />
    <Exec Command="$(LambdaWrapperILRepackCommand)" />
  </Target>
</Project>
