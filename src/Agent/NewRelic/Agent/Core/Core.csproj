<Project Sdk="Microsoft.NET.Sdk" ToolsVersion="15.0">
    <PropertyGroup>
        <TargetFrameworks>net35;netstandard2.0</TargetFrameworks>
        <AssemblyName>NewRelic.Agent.Core</AssemblyName>
        <RootNamespace>NewRelic.Agent.Core</RootNamespace>
        <Description></Description>
        <SignAssembly>true</SignAssembly>
        <AssemblyOriginatorKeyFile>$(SolutionDir)build\keys\NewRelicStrongNameKey.snk</AssemblyOriginatorKeyFile>
        <IntermediateOutputPath>$(SolutionDir)\src\_build\$(Platform)-$(Configuration)\$(AssemblyName)\</IntermediateOutputPath>
        <OutputPath>$(SolutionDir)\src\_build\$(Platform)-$(Configuration)\$(AssemblyName)\</OutputPath>
        <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
    </PropertyGroup>
    <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
        <DebugType>full</DebugType>
        <DebugSymbols>True</DebugSymbols>
    </PropertyGroup>
    <ItemGroup>
        <PackageReference Include="MoreLinq" Version="2.4.0" />
        <PackageReference Include="log4net" Version="2.0.8" />
        <PackageReference Include="ILRepack" Version="2.0.16" />
    </ItemGroup>

  <PropertyGroup>
    <VisualStudioVersion Condition="'$(VisualStudioVersion)' == ''">16.0</VisualStudioVersion>
    <VSToolsPath Condition="'$(VSToolsPath)' == ''">$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)</VSToolsPath>
    <TransformOnBuild>true</TransformOnBuild>
    <OverwriteReadOnlyOutputFiles>true</OverwriteReadOnlyOutputFiles>
    <TransformOutOfDateOnly>false</TransformOutOfDateOnly>
  </PropertyGroup>

  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" />
  <Import Project="$(VSToolsPath)\TextTemplating\Microsoft.TextTemplating.targets" />

  <PropertyGroup>
    <ConfigurationCsPath>$(SolutionDir)src\Agent\NewRelic\Agent\Core\Config\Configuration.cs</ConfigurationCsPath>
    <ExtensionCsPath>$(SolutionDir)src\Agent\NewRelic\Agent\Core\NewRelic.Agent.Core.Extension\Extension.cs</ExtensionCsPath>
  </PropertyGroup>

  <Target Name="GenerateCode" BeforeTargets="CreateGitVersion" Condition="!Exists('$(ConfigurationCsPath)') Or !Exists('$(ExtensionCsPath)')">
    <PropertyGroup>
      <Xsd2CodePath>$(SolutionDir)BuildTools\Xsd2Code.exe</Xsd2CodePath>
    </PropertyGroup>
    <!-- <Exec Command="&quot;$(Xsd2CodePath)&quot; &quot;$(SolutionDir)NewRelic\Agent\Core\Config\Configuration.xsd&quot; NewRelic.Agent.Core.Config Configuration.cs /cl /ap /sc /xa" /> -->
    <!-- <Exec Command="&quot;$(Xsd2CodePath)&quot; &quot;$(SolutionDir)NewRelic\Agent\Core\NewRelic.Agent.Core.Extension\Extension.xsd&quot; NewRelic.Agent.Core.Extension Extension.cs /cl /ap /sc /xa" /> -->
  </Target>

  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard2.0'">
    <PackageReference Include="Autofac" Version="4.5.0" />
    <PackageReference Include="Newtonsoft.Json" Version="10.0.2" />
  </ItemGroup>

  <ItemGroup Condition="'$(TargetFramework)' == 'net35'">
        <PackageReference Include="Castle.Core" Version="3.3.0" />
        <PackageReference Include="Castle.Windsor" Version="3.3.0" />
        <PackageReference Include="Newtonsoft.Json" Version="7.0.1" />
        <PackageReference Include="JustMock" Version="2015.2.616.2" />
    </ItemGroup>

    <ItemGroup Condition="'$(TargetFramework)' == 'net35'">
      <Reference Include="System" />
      <Reference Include="System.Messaging" />
      <Reference Include="System.Web" />
      <Reference Include="System.Data" />
      <Reference Include="System.Xml" />
      <Reference Include="System.Management" />
      <Reference Include="System.Configuration" />
    </ItemGroup>

    <ItemGroup Condition="'$(TargetFramework)' == 'net35'">
        <Reference Include="Dongle">
            <HintPath>$(SolutionDir)src\Agent\ExternalLibs\net35\dongle.dll</HintPath>
            <Private>True</Private>
        </Reference>
    </ItemGroup>

    <ItemGroup Condition="'$(TargetFramework)' == 'netstandard2.0'">
        <Reference Include="Dongle">
            <HintPath>$(SolutionDir)src\Agent\ExternalLibs\netstandard2.0\dongle.dll</HintPath>
            <Private>True</Private>
        </Reference>
    </ItemGroup>

    <ItemGroup>
        <Reference Include="ICSharpCode.SharpZipLib">
            <HintPath>$(SolutionDir)src\Agent\ExternalLibs\ICSharpCode.SharpZipLib.dll</HintPath>
            <Private>True</Private>
        </Reference>
    </ItemGroup>
    <ItemGroup>
        <ProjectReference Include="..\AttributeFilter\AttributeFilter.csproj" />
        <ProjectReference Include="..\Configuration\Configuration.csproj" />
        <ProjectReference Include="..\Extensions\NewRelic.Agent.Extensions\NewRelic.Agent.Extensions.csproj" />
        <ProjectReference Include="..\LabelsService\LabelsService.csproj" />
        <ProjectReference Include="..\NewRelic.Core\NewRelic.Core.csproj" />
        <ProjectReference Include="..\Parsing\Parsing.csproj" />
    </ItemGroup>
    <ItemGroup>
        <Compile Include="$(SolutionDir)src\Agent\Shared\SharedAssemblyInfo.cs">
          <Link>Properties\SharedAssemblyInfo.cs</Link>
        </Compile>
        <Compile Include="$(SolutionDir)src\Agent\Shared\SharedLog4NetRepository.cs">
            <Link>Properties\SharedLog4NetRepository.cs</Link>
        </Compile>
        <Compile Update="AgentInstallConfiguration_Generated.cs">
          <DesignTime>True</DesignTime>
          <AutoGen>True</AutoGen>
          <DependentUpon>AgentInstallConfiguration_Generated.tt</DependentUpon>
        </Compile>
        <Compile Update="Properties\Resources.Designer.cs">
            <AutoGen>True</AutoGen>
            <DesignTime>True</DesignTime>
            <DependentUpon>Resources.resx</DependentUpon>
        </Compile>

        <!-- The following includes are required because these files are generated by the PreBuildEvent. They do not exist when building from a clean working folder. 
             Since we are using EnableDefaultCompileItems, it seems the list of files to compile is determined prior to the PreBuildEvent. This causes compilation to fail on the
             first build attempt and then succeed on the second build attempt. These includes remedy this issue. -->
        <Compile Include="$(SolutionDir)src\Agent\NewRelic\Agent\Core\Config\Configuration.cs" Condition="!Exists('$(SolutionDir)src\Agent\NewRelic\Agent\Core\Config\Configuration.cs')" />
        <Compile Include="$(SolutionDir)src\Agent\NewRelic\Agent\Core\NewRelic.Agent.Core.Extension\Extension.cs" Condition="!Exists('$(SolutionDir)src\Agent\NewRelic\Agent\Core\NewRelic.Agent.Core.Extension\Extension.cs')" />
        <Compile Include="$(SolutionDir)src\Agent\NewRelic\Agent\Core\AgentInstallConfiguration_Generated.cs" Condition="!Exists('AgentInstallConfiguration_Generated.cs')">
          <DesignTime>True</DesignTime>
          <AutoGen>True</AutoGen>
          <DependentUpon>$(SolutionDir)src\Agent\NewRelic\Agent\Core\AgentInstallConfiguration_Generated.tt</DependentUpon>
        </Compile>
    </ItemGroup>
    <ItemGroup>
        <None Include="$(SolutionDir)build\keys\NewRelicStrongNameKey.snk">
            <Link>$(SolutionDir)build\keys\NewRelicStrongNameKey.snk</Link>
        </None>
    </ItemGroup>
    <ItemGroup>
        <EmbeddedResource Update="Properties\Resources.resx">
            <Generator>ResXFileCodeGenerator</Generator>
            <SubType>Designer</SubType>
        </EmbeddedResource>
    </ItemGroup>
    <ItemGroup>
      <Service Include="{508349b6-6b84-4df5-91f0-309beebad82d}" />
    </ItemGroup>
    <ItemGroup>
      <None Update="$(SolutionDir)src\Agent\NewRelic\Agent\Core\AgentInstallConfiguration_Generated.tt">
        <Generator>TextTemplatingFileGenerator</Generator>
        <LastGenOutput>AgentInstallConfiguration_Generated.cs</LastGenOutput>
      </None>
    </ItemGroup>

        <Target Name="ILRepack" AfterTargets="Build" Condition="'$(TargetFramework)' != ''">
        <ItemGroup>
            <PossibleRefsForILRepack Include="$(OutputPath)*.dll" />
        </ItemGroup>

        <ItemGroup>
            <ILRepackInclude Include="@(PossibleRefsForILRepack)" Condition="'%(FileName)' == 'NewRelic.Core'" />
            <ILRepackInclude Include="@(PossibleRefsForILRepack)" Condition="'%(FileName)' == 'NewRelic.Parsing'" />
            <ILRepackInclude Include="@(PossibleRefsForILRepack)" Condition="'%(FileName)' == 'System.Memory'" />
            <ILRepackInclude Include="@(PossibleRefsForILRepack)" Condition="'%(FileName)' == 'System.Runtime.CompilerServices.Unsafe'" />
            <ILRepackInclude Include="@(PossibleRefsForILRepack)" Condition="'%(FileName)' == 'NewRelic.Agent.AttributeFilter'" />
            <ILRepackInclude Include="@(PossibleRefsForILRepack)" Condition="'%(FileName)' == 'NewRelic.Agent.Configuration'" />
            <ILRepackInclude Include="@(PossibleRefsForILRepack)" Condition="'%(FileName)' == 'NewRelic.Trie'" />
            <ILRepackInclude Include="@(PossibleRefsForILRepack)" Condition="'%(FileName)' == 'Dongle'" />
            <ILRepackInclude Include="@(PossibleRefsForILRepack)" Condition="'%(FileName)' == 'NewRelic.Agent.LabelsService'" />
            <ILRepackInclude Include="@(PossibleRefsForILRepack)" Condition="'%(FileName)' == 'log4net'" />
            <ILRepackInclude Include="@(PossibleRefsForILRepack)" Condition="'%(FileName)' == 'Newtonsoft.Json'" />
            <ILRepackInclude Include="@(PossibleRefsForILRepack)" Condition="'%(FileName)' == 'MoreLinq'" />
            <ILRepackInclude Include="@(PossibleRefsForILRepack)" Condition="'%(FileName)' == 'ICSharpCode.SharpZipLib'" />
        </ItemGroup>

        <ItemGroup Condition="'$(TargetFramework)' == 'net35'">
            <ILRepackInclude Include="@(PossibleRefsForILRepack)" Condition="'%(FileName)' == 'Castle.Core'" />
            <ILRepackInclude Include="@(PossibleRefsForILRepack)" Condition="'%(FileName)' == 'Castle.Windsor'" />
            <ILRepackInclude Include="@(PossibleRefsForILRepack)" Condition="'%(FileName)' == 'System.ValueTuple'" />
        </ItemGroup>

        <ItemGroup Condition="'$(TargetFramework)' == 'netstandard2.0'">
            <ILRepackInclude Include="@(PossibleRefsForILRepack)" Condition="'%(FileName)' == 'Autofac'" />
        </ItemGroup>

        <PropertyGroup>
            <ILRepackIncludeCount Condition="'$(TargetFramework)' == 'net35'">13</ILRepackIncludeCount>
            <ILRepackIncludeCount Condition="'$(TargetFramework)' == 'netstandard2.0'">13</ILRepackIncludeCount>
        </PropertyGroup>

        <Error Text="ILRepack of $(AssemblyName) ($(TargetFramework)) failed. A dependency is missing. Expected $(ILRepackIncludeCount) dependencies but found @(ILRepackInclude-&gt;Count())." Condition="@(ILRepackInclude-&gt;Count()) != $(ILRepackIncludeCount)" />

        <ItemGroup>
            <ILRepackExclude Include="@(PossibleRefsForILRepack)" Exclude="@(ILRepackInclude)" />
        </ItemGroup>

        <Message Importance="High" Text="ILRepack Include: %(ILRepackInclude.FullPath)" />
        <Message Importance="High" Text="ILRepack Exclude: %(ILRepackExclude.FullPath)" />

        <PropertyGroup>
            <ILRepackSearchDirOutputPath>$([System.String]::new("$(OutputPath)").Trim('\'))</ILRepackSearchDirOutputPath>
        </PropertyGroup>

        <PropertyGroup>
            <ILRepackCommand>"$(ILRepack)" --parallel --internalize --norepackres --keepotherversionreferences --keyfile:"$(AssemblyOriginatorKeyFile)" --lib:"$(ILRepackSearchDirOutputPath)" --out:"$(OutputPath)..\$(TargetFramework)-ILRepacked\$(AssemblyName).dll" "$(TargetPath)" "@(ILRepackInclude, '" "')"</ILRepackCommand>
        </PropertyGroup>

        <Message Importance="High" Text="Executing ILRepack.exe for $(TargetFramework) build: $(ILRepackCommand)" />
        <Exec Command="$(ILRepackCommand)" />
    </Target>

</Project>
