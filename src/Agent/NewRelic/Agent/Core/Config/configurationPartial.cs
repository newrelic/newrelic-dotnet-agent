// Copyright 2020 New Relic, Inc. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

    using System.Xml.Serialization;
    using NewRelic.Agent.Core.Configuration;
    using NewRelic.Core.Logging;

    namespace NewRelic.Agent.Core.Config;

    // The configuration class is partial.  Part of it is implemented here,
    // and another part is autogenerated from Configuration.xsd into Configuration.cs.
    //
    // Beware the tarpit surrounding the case of property names, as different cases reflect
    // different origins of the property names.
    //
    // Property names such as "agentEnabled" come to us from Configuration.xsd via Configuration.cs.
    // Property names such as "AgentEnabled" are added in here or inherited from BootstrapConfig.
    public partial class configuration
    {
        private string _awsLambdaFunctionName;

        public string Xml { get; set; }

        [XmlIgnore]
        public string ConfigurationFileName { get; set; }

        public configuration Initialize(string xml, string provenance)
        {
            Xml = xml;

            if (log == null)
                log = new configurationLog();

            try
            {
                var enabledProvenance = ConfigurationLoader.GetConfigSetting(Constants.AppSettingsAgentEnabled);
                if (enabledProvenance != null && enabledProvenance.Value != null && bool.Parse(enabledProvenance.Value) == false)
                {
                    agentEnabled = false;
                    AgentEnabledAt = enabledProvenance.Provenance;
                }
            }
            catch
            {
                Log.Error($"Failed to read {Constants.AppSettingsAgentEnabled} from local config.");
            }

            return this;
        }

        [XmlIgnore]
        public string AgentEnabledAt { get; private set; }

        [XmlIgnore]
        public ILogConfig LogConfig { get { return log; } }

        private bool? _serverlessModeEnabled;
        [XmlIgnore]
        public bool ServerlessModeEnabled
        {
            get
            {
                return _serverlessModeEnabled ??= CheckServerlessModeEnabled();
            }

            // for unit tests only, remove if we refactor to move this property into DefaultConfiguration
            set { _serverlessModeEnabled = value; }
        }

        private bool CheckServerlessModeEnabled()
        {
            // according to the spec, environment variable takes precedence over config file
            var serverlessModeEnvVariable = ConfigurationLoader.GetEnvironmentVar("NEW_RELIC_SERVERLESS_MODE_ENABLED");

            if (serverlessModeEnvVariable.TryToBoolean(out var enabledViaEnvVariable))
            {
                return enabledViaEnvVariable;
            }

            // env variable is not set, check for function name
            if (!string.IsNullOrEmpty(AwsLambdaFunctionName))
                return true;

            // fall back to config file
            return serverlessModeEnabled;
        }

        [XmlIgnore]
        public string AwsLambdaFunctionName
        {
            get
            {
                return _awsLambdaFunctionName ??= ConfigurationLoader.GetEnvironmentVar("AWS_LAMBDA_FUNCTION_NAME");
            }
        }
    }
