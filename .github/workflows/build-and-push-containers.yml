# This workflow builds and pushes Docker images for each service in docker-compose.yml to Azure Container Registry
# ACR: dotnetunboundedservices-dhgfaedgcsdfb5bh

name: Build, Push and Deploy UnboundedServices Containers

on:
  push:
    paths:
      - 'tests/Agent/IntegrationTests/UnboundedServices/docker-compose.yml'
      - '.github/workflows/build-and-push-containers.yml'
      - 'tests/Agent/IntegrationTests/UnboundedServices/**'
  workflow_dispatch:
    inputs:
      services:
        description: 'Comma-separated list of services to build and deploy (leave blank for all). Valid values: couchbase, postgres, mssql, mysql, rabbitmq, mongodb32, mongodb60, oracle, elastic, elastic7.'
        required: false
        default: ''

permissions:
  contents: read
  id-token: write
  actions: read
  pull-requests: read

jobs:
  set-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set matrix based on input
        id: set-matrix
        run: |
          ALL_SERVICES=(couchbase postgres mssql mysql rabbitmq mongodb32 mongodb60 oracle elastic elastic7)
          if [ -z "${{ github.event.inputs.services }}" ]; then
            SELECTED=("${ALL_SERVICES[@]}")
          else
            IFS=',' read -ra SELECTED <<< "${{ github.event.inputs.services }}"
            # Trim whitespace
            for i in "${!SELECTED[@]}"; do
              SELECTED[$i]="$(echo \"${SELECTED[$i]}\" | xargs)"
            done
          fi
          # Build compact JSON array of strings for matrix
          JSON_MATRIX=$(printf '%s\n' "${SELECTED[@]}" | jq -R -s -c '. / "\n" | map(select(length > 0))')
          echo "matrix=${JSON_MATRIX}" >> $GITHUB_OUTPUT

  build-and-deploy:
    needs: set-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service: ${{ fromJson(needs.set-matrix.outputs.matrix) }}
    permissions:
      contents: read
      id-token: write
      actions: read
      pull-requests: read
    env:
      REGISTRY: ${{ secrets.REGISTRY_LOGIN_SERVER }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          disable-sudo: true
          egress-policy: audit
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Azure Login
        uses: azure/login@a457da9ea143d694b1b9c7c869ebb04ebe844ef5 # v2.3.0
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Azure Container Registry Login
        uses: azure/docker-login@15c4aadf093404726ab2ff205b2cdd33fa6d054c # v2.0.0
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - name: Set service config
        id: config
        run: |
          case "${{ matrix.service }}" in
            couchbase)
              echo "context=tests/Agent/IntegrationTests/UnboundedServices/couchbase" >> $GITHUB_OUTPUT
              echo "tag=couchbase:latest" >> $GITHUB_OUTPUT
              echo "ports=8091,8092,8093,8094,8095,11210" >> $GITHUB_OUTPUT
              echo "memory=3.0" >> $GITHUB_OUTPUT
              echo "cpu=2.0" >> $GITHUB_OUTPUT
              echo "env=COUCHBASE_ADMINISTRATOR_PASSWORD=${{ secrets.COUCHBASE_ADMINISTRATOR_PASSWORD }}" >> $GITHUB_OUTPUT
              ;;
            postgres)
              echo "context=tests/Agent/IntegrationTests/UnboundedServices/postgres" >> $GITHUB_OUTPUT
              echo "tag=postgres:latest" >> $GITHUB_OUTPUT
              echo "ports=5432" >> $GITHUB_OUTPUT
              echo "memory=3.0" >> $GITHUB_OUTPUT
              echo "cpu=2.0" >> $GITHUB_OUTPUT
              echo "env=POSTGRES_USER=postgres\nPOSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> $GITHUB_OUTPUT
              ;;
            mssql)
              echo "context=tests/Agent/IntegrationTests/UnboundedServices/mssql" >> $GITHUB_OUTPUT
              echo "tag=mssql:latest" >> $GITHUB_OUTPUT
              echo "ports=1433" >> $GITHUB_OUTPUT
              echo "memory=3.0" >> $GITHUB_OUTPUT
              echo "cpu=2.0" >> $GITHUB_OUTPUT
              echo "env=SA_PASSWORD=${{ secrets.MSSQL_SA_PASSWORD }}" >> $GITHUB_OUTPUT
              ;;
            mysql)
              echo "context=tests/Agent/IntegrationTests/UnboundedServices/mysql" >> $GITHUB_OUTPUT
              echo "tag=mysql:latest" >> $GITHUB_OUTPUT
              echo "ports=3306" >> $GITHUB_OUTPUT
              echo "command=mysqld --default-authentication-plugin=mysql_native_password" >> $GITHUB_OUTPUT
              echo "memory=3.0" >> $GITHUB_OUTPUT
              echo "cpu=2.0" >> $GITHUB_OUTPUT
              echo "env=MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> $GITHUB_OUTPUT
              ;;
            rabbitmq)
              echo "context=tests/Agent/IntegrationTests/UnboundedServices/rabbitmq" >> $GITHUB_OUTPUT
              echo "tag=rabbitmq:latest" >> $GITHUB_OUTPUT
              echo "ports=5671,5672,15671,15672" >> $GITHUB_OUTPUT
              echo "command=/bin/sh -c 'rabbitmq-plugins enable --offline rabbitmq_management && rabbitmq-server'" >> $GITHUB_OUTPUT
              echo "memory=3.0" >> $GITHUB_OUTPUT
              echo "cpu=2.0" >> $GITHUB_OUTPUT
              echo "env=RABBITMQ_DEFAULT_USER=${{ secrets.RABBITMQ_DEFAULT_USER }}\nRABBITMQ_DEFAULT_PASS=${{ secrets.RABBITMQ_DEFAULT_PASS }}" >> $GITHUB_OUTPUT
              ;;
            mongodb32)
              echo "context=tests/Agent/IntegrationTests/UnboundedServices/mongodb32" >> $GITHUB_OUTPUT
              echo "tag=mongodb32:latest" >> $GITHUB_OUTPUT
              echo "ports=27017" >> $GITHUB_OUTPUT
              echo "memory=3.0" >> $GITHUB_OUTPUT
              echo "cpu=2.0" >> $GITHUB_OUTPUT
              echo "env=MONGO_INITDB_ROOT_USERNAME=${{ secrets.MONGO_INITDB_ROOT_USERNAME }}\nMONGO_INITDB_ROOT_PASSWORD=${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}" >> $GITHUB_OUTPUT
              ;;
            mongodb60)
              echo "context=tests/Agent/IntegrationTests/UnboundedServices/mongodb60" >> $GITHUB_OUTPUT
              echo "tag=mongodb60:latest" >> $GITHUB_OUTPUT
              echo "ports=27018:27017" >> $GITHUB_OUTPUT
              echo "memory=3.0" >> $GITHUB_OUTPUT
              echo "cpu=2.0" >> $GITHUB_OUTPUT
              echo "env=MONGO_INITDB_ROOT_USERNAME=${{ secrets.MONGO_INITDB_ROOT_USERNAME }}\nMONGO_INITDB_ROOT_PASSWORD=${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}" >> $GITHUB_OUTPUT
              ;;
            oracle)
              echo "context=tests/Agent/IntegrationTests/UnboundedServices/oracle" >> $GITHUB_OUTPUT
              echo "tag=oracle:latest" >> $GITHUB_OUTPUT
              echo "ports=1521" >> $GITHUB_OUTPUT
              echo "memory=3.0" >> $GITHUB_OUTPUT
              echo "cpu=2.0" >> $GITHUB_OUTPUT
              echo "env=ORACLE_PWD=${{ secrets.ORACLE_PWD }}" >> $GITHUB_OUTPUT
              ;;
            elastic)
              echo "context=tests/Agent/IntegrationTests/UnboundedServices/elastic" >> $GITHUB_OUTPUT
              echo "tag=elastic:latest" >> $GITHUB_OUTPUT
              echo "ports=9200" >> $GITHUB_OUTPUT
              echo "memory=2.0" >> $GITHUB_OUTPUT
              echo "cpu=1.0" >> $GITHUB_OUTPUT
              echo "env=ELASTIC_PASSWORD=${{ secrets.ELASTIC_PASSWORD }}" >> $GITHUB_OUTPUT
              ;;
            elastic7)
              echo "context=tests/Agent/IntegrationTests/UnboundedServices/elastic7" >> $GITHUB_OUTPUT
              echo "tag=elastic7:latest" >> $GITHUB_OUTPUT
              echo "ports=9201:9200" >> $GITHUB_OUTPUT
              echo "memory=2.0" >> $GITHUB_OUTPUT
              echo "cpu=1.0" >> $GITHUB_OUTPUT
              echo "env=ELASTIC_PASSWORD=${{ secrets.ELASTIC_PASSWORD }}" >> $GITHUB_OUTPUT
              ;;
          esac
      - name: Build and push ${{ matrix.service }} image
        uses: docker/build-push-action@1dc73863535b631f98b2378be8619f83b136f4a0 # v6.17.0
        with:
          context: ${{ steps.config.outputs.context }}
          push: true
          tags: ${{ env.REGISTRY }}/${{ steps.config.outputs.tag }}
      - name: Deploy ${{ matrix.service }} to Azure Container Instance
        shell: bash
        run: |
          # Parse environment variables (newline separated) into --environment-variables args
          ENV_ARGS=""
          if [ -n "${{ steps.config.outputs.env }}" ]; then
            while IFS= read -r line; do
              [ -z "$line" ] && continue
              ENV_ARGS="$ENV_ARGS --environment-variables $line"
            done <<< "$(echo -e "${{ steps.config.outputs.env }}")"
          fi

          # Parse command-line if present
          CMD_ARG=""
          if [ -n "${{ steps.config.outputs.command }}" ]; then
            CMD_ARG="--command-line \"${{ steps.config.outputs.command }}\""
          fi

          # Always set memory and cpu (default 1.0 if not set)
          MEMORY="${{ steps.config.outputs.memory }}"
          CPU="${{ steps.config.outputs.cpu }}"
          if [ -z "$MEMORY" ]; then MEMORY=1.0; fi
          if [ -z "$CPU" ]; then CPU=1.0; fi
          MEM_ARG="--memory $MEMORY"
          CPU_ARG="--cpu $CPU"

          az container create \
            --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}" \
            --name "${{ matrix.service }}-server" \
            --image "${{ env.REGISTRY }}/${{ steps.config.outputs.tag }}" \
            --registry-login-server "${{ env.REGISTRY }}" \
            --registry-username "${{ secrets.REGISTRY_USERNAME }}" \
            --registry-password "${{ secrets.REGISTRY_PASSWORD }}" \
            --dns-name-label "dotnet-unboundedservices-${{ matrix.service }}-server" \
            --location "${{ secrets.AZURE_LOCATION }}" \
            --os-type Linux \
            --ports $(echo ${{ steps.config.outputs.ports }} | tr ',' ' ') \
            --log-analytics-workspace "unbounded-container-logs-workspace" \
            $MEM_ARG \
            $CPU_ARG \
            $CMD_ARG \
            $ENV_ARGS
