# This workflow builds and pushes Docker images for each service in docker-compose.yml to Azure Container Registry
# ACR: dotnetunboundedservices-dhgfaedgcsdfb5bh

name: Build, Push and Deploy UnboundedServices Containers

on:
  push:
    paths:
      - 'tests/Agent/IntegrationTests/UnboundedServices/docker-compose.yml'
      - '.github/workflows/build-and-push-containers.yml'
      - 'tests/Agent/IntegrationTests/UnboundedServices/**'
  workflow_dispatch:

permissions:
  contents: read
  id-token: write
  actions: read
  pull-requests: read

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      actions: read
      pull-requests: read
    env:
      REGISTRY: ${{ secrets.REGISTRY_LOGIN_SERVER }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          disable-sudo: true
          egress-policy: audit
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Azure Container Registry Login
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and push Couchbase image
        uses: docker/build-push-action@1dc73863535b631f98b2378be8619f83b136f4a0 # v6.17.0
        with:
          context: tests/Agent/IntegrationTests/UnboundedServices/couchbase
          push: true
          tags: ${{ env.REGISTRY }}/couchbase:latest

      - name: Build and push Postgres image
        uses: docker/build-push-action@1dc73863535b631f98b2378be8619f83b136f4a0 # v6.17.0
        with:
          context: tests/Agent/IntegrationTests/UnboundedServices/postgres
          push: true
          tags: ${{ env.REGISTRY }}/postgres:latest

      - name: Build and push MSSQL image
        uses: docker/build-push-action@1dc73863535b631f98b2378be8619f83b136f4a0 # v6.17.0
        with:
          context: tests/Agent/IntegrationTests/UnboundedServices/mssql
          push: true
          tags: ${{ env.REGISTRY }}/mssql:latest

      - name: Build and push MySQL image
        uses: docker/build-push-action@1dc73863535b631f98b2378be8619f83b136f4a0 # v6.17.0
        with:
          context: tests/Agent/IntegrationTests/UnboundedServices/mysql
          push: true
          tags: ${{ env.REGISTRY }}/mysql:latest

      - name: Deploy RabbitMQ to Azure Container Instance
        uses: azure/aci-deploy@28cafb864979bc5b44cd1f3fd45522727eb5a3db # v1.1.3
        with:
          resource-group: ${{ secrets.AZURE_RESOURCE_GROUP }}
          location: ${{ secrets.AZURE_LOCATION }}
          dns-name-label: rabbitmq-server-${{ github.run_id }}
          name: rabbitmq-server
          image: rabbitmq:3.9.5
          ports: 5671,5672,15671,15672
          command-line: rabbitmq-plugins enable --offline rabbitmq_management && rabbitmq-server
          environment-variables: |
            RABBITMQ_DEFAULT_USER=${{ secrets.RABBITMQ_DEFAULT_USER }}
            RABBITMQ_DEFAULT_PASS=${{ secrets.RABBITMQ_DEFAULT_PASS }}

      - name: Deploy MongoDB32 to Azure Container Instance
        uses: azure/aci-deploy@28cafb864979bc5b44cd1f3fd45522727eb5a3db # v1.1.3
        with:
          resource-group: ${{ secrets.AZURE_RESOURCE_GROUP }}
          location: ${{ secrets.AZURE_LOCATION }}
          dns-name-label: mongodb32-server-${{ github.run_id }}
          name: mongodb32-server
          image: mongo:3.2
          ports: 27017
          environment-variables: |
            MONGO_INITDB_ROOT_USERNAME=${{ secrets.MONGO_INITDB_ROOT_USERNAME }}
            MONGO_INITDB_ROOT_PASSWORD=${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}

      - name: Deploy MongoDB60 to Azure Container Instance
        uses: azure/aci-deploy@28cafb864979bc5b44cd1f3fd45522727eb5a3db # v1.1.3
        with:
          resource-group: ${{ secrets.AZURE_RESOURCE_GROUP }}
          location: ${{ secrets.AZURE_LOCATION }}
          dns-name-label: mongodb60-server-${{ github.run_id }}
          name: mongodb60-server
          image: mongo:6.0.2
          ports: 27017
          environment-variables: |
            MONGO_INITDB_ROOT_USERNAME=${{ secrets.MONGO_INITDB_ROOT_USERNAME }}
            MONGO_INITDB_ROOT_PASSWORD=${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}

      - name: Deploy Couchbase to Azure Container Instance
        uses: azure/aci-deploy@28cafb864979bc5b44cd1f3fd45522727eb5a3db # v1.1.3
        with:
          resource-group: ${{ secrets.AZURE_RESOURCE_GROUP }}
          location: ${{ secrets.AZURE_LOCATION }}
          dns-name-label: couchbase-server-${{ github.run_id }}
          name: couchbase-server
          image: ${{ env.REGISTRY }}/couchbase:latest
          registry-login-server: ${{ env.REGISTRY }}
          registry-username: ${{ secrets.REGISTRY_USERNAME }}
          registry-password: ${{ secrets.REGISTRY_PASSWORD }}
          ports: 8091,8092,8093,8094,8095,11210
          environment-variables: |
            COUCHBASE_ADMINISTRATOR_PASSWORD=${{ secrets.COUCHBASE_ADMINISTRATOR_PASSWORD }}

      - name: Deploy Postgres to Azure Container Instance
        uses: azure/aci-deploy@28cafb864979bc5b44cd1f3fd45522727eb5a3db # v1.1.3
        with:
          resource-group: ${{ secrets.AZURE_RESOURCE_GROUP }}
          location: ${{ secrets.AZURE_LOCATION }}
          dns-name-label: postgres-server-${{ github.run_id }}
          name: postgres-server
          image: ${{ env.REGISTRY }}/postgres:latest
          registry-login-server: ${{ env.REGISTRY }}
          registry-username: ${{ secrets.REGISTRY_USERNAME }}
          registry-password: ${{ secrets.REGISTRY_PASSWORD }}
          ports: 5432
          environment-variables: |
            POSTGRES_USER=postgres
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}

      - name: Deploy MSSQL to Azure Container Instance
        uses: azure/aci-deploy@28cafb864979bc5b44cd1f3fd45522727eb5a3db # v1.1.3
        with:
          resource-group: ${{ secrets.AZURE_RESOURCE_GROUP }}
          location: ${{ secrets.AZURE_LOCATION }}
          dns-name-label: mssql-server-${{ github.run_id }}
          name: mssql-server
          image: ${{ env.REGISTRY }}/mssql:latest
          registry-login-server: ${{ env.REGISTRY }}
          registry-username: ${{ secrets.REGISTRY_USERNAME }}
          registry-password: ${{ secrets.REGISTRY_PASSWORD }}
          ports: 1433
          environment-variables: |
            SA_PASSWORD=${{ secrets.MSSQL_SA_PASSWORD }}

      - name: Deploy MySQL to Azure Container Instance
        uses: azure/aci-deploy@28cafb864979bc5b44cd1f3fd45522727eb5a3db # v1.1.3
        with:
          resource-group: ${{ secrets.AZURE_RESOURCE_GROUP }}
          location: ${{ secrets.AZURE_LOCATION }}
          dns-name-label: mysql-server-${{ github.run_id }}
          name: mysql-server
          image: ${{ env.REGISTRY }}/mysql:latest
          registry-login-server: ${{ env.REGISTRY }}
          registry-username: ${{ secrets.REGISTRY_USERNAME }}
          registry-password: ${{ secrets.REGISTRY_PASSWORD }}
          ports: 3306
          environment-variables: |
            MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}

      - name: Deploy Oracle to Azure Container Instance
        uses: azure/aci-deploy@28cafb864979bc5b44cd1f3fd45522727eb5a3db # v1.1.3
        with:
          resource-group: ${{ secrets.AZURE_RESOURCE_GROUP }}
          location: ${{ secrets.AZURE_LOCATION }}
          dns-name-label: oracle-server-${{ github.run_id }}
          name: oracle-server
          image: container-registry.oracle.com/database/free:23.4.0.0-lite
          ports: 1521
          environment-variables: ORACLE_PWD=${{ secrets.ORACLE_PWD }}

      - name: Deploy Elastic to Azure Container Instance
        uses: azure/aci-deploy@28cafb864979bc5b44cd1f3fd45522727eb5a3db # v1.1.3
        with:
          resource-group: ${{ secrets.AZURE_RESOURCE_GROUP }}
          location: ${{ secrets.AZURE_LOCATION }}
          dns-name-label: elastic-server-${{ github.run_id }}
          name: elastic-server
          image: elasticsearch:8.6.2
          ports: 9200
          environment-variables: |
            discovery.type=single-node
            ELASTIC_PASSWORD=${{ secrets.ELASTIC_PASSWORD }}
            xpack.security.enabled=true
            xpack.security.http.ssl.enabled=false

      - name: Deploy Elastic7 to Azure Container Instance
        uses: azure/aci-deploy@28cafb864979bc5b44cd1f3fd45522727eb5a3db # v1.1.3
        with:
          resource-group: ${{ secrets.AZURE_RESOURCE_GROUP }}
          location: ${{ secrets.AZURE_LOCATION }}
          dns-name-label: elastic7-server-${{ github.run_id }}
          name: elastic7-server
          image: elasticsearch:7.17.10
          ports: 9201
          environment-variables: |
            discovery.type=single-node
            ELASTIC_PASSWORD=${{ secrets.ELASTIC_PASSWORD }}
            xpack.security.enabled=true
            xpack.security.http.ssl.enabled=false

    #   - name: Deploy KibanaPWSetup to Azure Container Instance
    #     uses: azure/aci-deploy@28cafb864979bc5b44cd1f3fd45522727eb5a3db # v1.1.3
    #     with:
    #       resource-group: ${{ secrets.AZURE_RESOURCE_GROUP }}
    #       location: ${{ secrets.AZURE_LOCATION }}
    #       dns-name-label: kibanapwsetup-server-${{ github.run_id }}
    #       name: kibanapwsetup-server
    #       image: curlimages/curl
    #       command-line: >-
    #         sh -c "sleep 10 && curl --user 'elastic:${{ secrets.ELASTIC_PASSWORD }}' -X POST 'elastic:9200/_security/user/kibana_system/_password?pretty' -H 'Content-Type: application/json' -d'{  \"password\" : \"${{ secrets.KIBANA_PASSWORD }}\"}'"

    #   - name: Deploy Kibana to Azure Container Instance
    #     uses: azure/aci-deploy@28cafb864979bc5b44cd1f3fd45522727eb5a3db # v1.1.3
    #     with:
    #       resource-group: ${{ secrets.AZURE_RESOURCE_GROUP }}
    #       location: ${{ secrets.AZURE_LOCATION }}
    #       dns-name-label: kibana-server-${{ github.run_id }}
    #       name: kibana-server
    #       image: kibana:8.6.2
    #       ports: 5601
    #       environment-variables: |
    #         SERVERNAME=kibana
    #         ELASTICSEARCH_HOSTS=http://elastic:9200
    #         ELASTICSEARCH_USERNAME=kibana_system
    #         ELASTICSEARCH_PASSWORD=${{ secrets.KIBANA_PASSWORD }}
