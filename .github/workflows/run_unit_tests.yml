name: .NET Agent Unit Tests and Code Coverage

# Does not run on PUSH since we have already ran all the test
on:
  push:
    branches: 
    - 'tippmar-nr**'

env:
  scripts_path: ${{ github.workspace }}\build\scripts
  tools_path: ${{ github.workspace }}\build\Tools
  DOTNET_NOLOGO: true

jobs:

  run-unit-tests:
    name: Run Unit Tests
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.x
          dotnet-quality: 'ga'

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1

      #- name: Setup NuGet
      #  uses: NuGet/setup-nuget@v1.0.2

      - name: Setup VSTest Path
        uses: darenm/Setup-VSTest@v1

      - name: Restore NuGet Packages
        run: dotnet restore -f

      - name: Unit Tests
        run: |
          Write-Host "Creating TestResults directory to temporarily get around nunit limitation"
          mkdir ${{ github.workspace }}\TestResults
          #mkdir TestResults
          $testDllPatterns = @('*Tests.dll', '*Test.dll', '*Test.Legacy.dll')
          Write-Host "Finding files for Framework NUnit tests"
          $frameworkTestPaths = @('Tests\Agent\UnitTests', 'Tests\NewRelic.Core.Tests')
          $frameworkTestFileNames = (Get-ChildItem -Recurse -Path $frameworkTestPaths -Include $testDllPatterns | Where-Object { !$_.FullName.Contains('obj\Release') } | Select Name -Unique)
          $frameworkFiles = (Get-ChildItem -Recurse -Path $frameworkTestPaths -Include $testDllPatterns | Where-Object { !$_.FullName.Contains('obj\Release')  })

          Write-Host "Building file list for Framework NUnit tests"
          $frameworkUnitTestPaths = @()
          for ($i = 0; $i -lt $frameworkTestFileNames.Length; $i++)
          { $frameworkFiles | ForEach-Object { if ($_.Name -eq $frameworkTestFileNames[$i].Name) { $frameworkUnitTestPaths += $_.FullName; Continue } } }

          $frameworkUnitTestPaths | ForEach-Object { $_ }
          Write-Host "Executing: vstest.console.exe " $frameworkUnitTestPaths " --parallel --logger:'html;LogFileName=agent-results.html'"
          vstest.console.exe $frameworkUnitTestPaths --parallel --logger:"html;LogFileName=agent-results.html" /testadapterpath:$env:USERPROFILE\.nuget\packages\coverlet.collector\1.0.1\build\netstandard1.0

          if ($LastExitCode -ne 0)
          { exit $LastExitCode }

          Write-Host "Finding files for .NET Core NUnit tests"
          $netCoreTestFileNames = (Get-ChildItem -Recurse -Path 'Tests\AwsLambda\UnitTests' -Include $testDllPatterns | Where-Object { !$_.FullName.Contains('obj\Release') } | Select Name -Unique)
          $netCoreFiles = (Get-ChildItem -Recurse -Path 'Tests\AwsLambda\UnitTests' -Include $testDllPatterns | Where-Object { !$_.FullName.Contains('obj\Release')  })

          Write-Host "Building file list for .NET Core NUnit tests"
          $netCoreUnitTestPaths = @()
          for ($i = 0; $i -lt $netCoreTestFileNames.Length; $i++)
          { $netCoreFiles | ForEach-Object { if ($_.Name -eq $netCoreTestFileNames[$i].Name) { $netCoreUnitTestPaths += $_.FullName; Continue } } }

          Write-Host "Executing .NET Core NUnit Tests:"
          $netCoreUnitTestPaths | ForEach-Object { $_ }
          Write-Host "Executing: dotnet test " $netCoreUnitTestPaths " --parallel --logger:'html;LogFileName=lambda-results.html'"
          dotnet test $netCoreUnitTestPaths --logger:"html;LogFileName=lambda-results.html" --collect:"XPlat Code Coverage"  /testadapterpath:$env:USERPROFILE\.nuget\packages\coverlet.collector\3.2.0\build\netstandard1.0

          if ($LastExitCode -ne 0)
          { exit $LastExitCode }
        shell: powershell

      - name: Upload coverage reports to Codecov.io
        uses: codecov/codecov-action@v3


      #- name: Install dependencies
      #  run: dotnet restore -f
      #- name: Build & Test (only builds unit test projects and their dependencies)
      #  run: dotnet test --no-restore --verbosity normal --collect:"XPlat Code Coverage"

#      - name: Upload coverage reports to Codecov with GitHub Action
#        uses: codecov/codecov-action@v3

      #- name: ReportGenerator
      #  uses: danielpalme/ReportGenerator-GitHub-Action@5.1.14
      #  with:
      #    reports: '**/TestResults/**/coverage.cobertura.xml'
      #    targetdir: 'coveragereport'
      #    reporttypes: 'Html;MarkdownSummaryGithub;PngChart'
      #    historydir: 'code-coverage-history'
      #    filefilters: '-*/Tests/*'
      #    title: 'New Relic .NET Agent Code Coverage'
      #- name: Upload coverage report artifact
      #  uses: actions/upload-artifact@v2.2.3
      #  with:
      #      name: CoverageReport # Artifact name        
      #      path: coveragereport # Directory containing files to upload
