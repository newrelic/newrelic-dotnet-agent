name: .NET New Relic Lambda Tracer Release Build

on:
  release:
    types: [ published ]
  workflow_dispatch:

# only allow one instance of this workflow to be running per PR or branch, cancels any that are already running
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  
env:
  scripts_path: ${{ github.workspace }}\build\scripts
  tools_path: ${{ github.workspace }}\build\Tools
  DOTNET_NOLOGO: true

jobs:

  build-test-lambda:
    name: Build and Test FullAgent and MSIInstaller
    runs-on: windows-2019

    env:
      tracer_project_path: ${{ github.workspace }}\src\AwsLambda\AwsLambdaOpenTracer\Tracer.csproj
      tracer_tests_project_path: ${{ github.workspace }}\tests\AwsLambda\UnitTests\AwsLambdaOpenTracerTests\AwsLambdaOpenTracerTests.csproj
      wrapper_tests_project_path: ${{ github.workspace }}\\tests\AwsLambda\UnitTests\AwsLambdaWrapperTests\AwsLambdaWrapperTests.csproj

    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 0

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@1ff57057b5cfdc39105cd07a01d78e9b0ea0c14c # v1.3.1

      - name: Setup VSTest Path
        uses: darenm/Setup-VSTest@fbb574e849d6225ce9702f86e64eb6cdc4b4e561 # v1.1.1
      
      - name: Build Lambda Tracer
        run: |
          Write-Host "List NuGet Sources"
          dotnet nuget list source # For unknown reasons, this step is necessary to avoid subsequent problems with NuGet package restore
          Write-Host "MSBuild.exe -restore -m -p:Configuration=Release -p:AllowUnsafeBlocks=true ${{ env.tracer_project_path }}"
          MSBuild.exe -restore -m -p:Configuration=Release -p:AllowUnsafeBlocks=true ${{ env.tracer_project_path }}
          Write-Host "MSBuild.exe -restore -m -p:Configuration=Release -p:AllowUnsafeBlocks=true ${{ env.tracer_tests_project_path }}"
          MSBuild.exe -restore -m -p:Configuration=Release -p:AllowUnsafeBlocks=true ${{ env.tracer_tests_project_path }}
          Write-Host "MSBuild.exe -restore -m -p:Configuration=Release -p:AllowUnsafeBlocks=true ${{ env.wrapper_tests_project_path }}"
          MSBuild.exe -restore -m -p:Configuration=Release -p:AllowUnsafeBlocks=true ${{ env.wrapper_tests_project_path }}

        shell: powershell

      - name: Archive NewRelic.OpenTracing.AmazonLambda.Tracer
        uses: actions/upload-artifact@c7d193f32edcb7bfad88892161225aeda64e9392 # v4.0.0
        with:
          name: NewRelic.OpenTracing.AmazonLambda.Tracer
          path: ${{ github.workspace }}\src\AwsLambda\AwsLambdaOpenTracer\bin\Release\netstandard2.0-ILRepacked
          if-no-files-found: error

      - name: Unit Tests
        run: |
          # Write-Host ${{ env.scripts_path }}\DotNet-Agent-CI-UnitTests.ps1
          # ${{ env.scripts_path }}\DotNet-Agent-CI-UnitTests.ps1
          Write-Host "Creating TestResults directory to temporarily get around nunit limitation"
          mkdir ${{ github.workspace }}\TestResults

          $testDllPatterns = @('*Tests.dll', '*Test.dll', '*Test.Legacy.dll')

          Write-Host "Finding files for .NET Core NUnit tests"
          $netCoreTestFileNames = (Get-ChildItem -Recurse -Path 'Tests\AwsLambda\UnitTests' -Include $testDllPatterns | Where-Object { !$_.FullName.Contains('obj\Release') } | Select Name -Unique)
          $netCoreFiles = (Get-ChildItem -Recurse -Path 'Tests\AwsLambda\UnitTests' -Include $testDllPatterns | Where-Object { !$_.FullName.Contains('obj\Release')  })

          Write-Host "Building file list for .NET Core NUnit tests"
          $netCoreUnitTestPaths = @()

          for ($i = 0; $i -lt $netCoreTestFileNames.Length; $i++)
          { $netCoreFiles | ForEach-Object { if ($_.Name -eq $netCoreTestFileNames[$i].Name) { $netCoreUnitTestPaths += $_.FullName; Continue } } }

          Write-Host "Executing .NET Core NUnit Tests:"
          $netCoreUnitTestPaths | ForEach-Object { $_ }

          Write-Host "Executing: dotnet test " $netCoreUnitTestPaths " --parallel --logger:'html;LogFileName=lambda-results.html'"
          dotnet test $netCoreUnitTestPaths --parallel --logger:"html;LogFileName=lambda-results.html"

          if ($LastExitCode -ne 0)
          { exit $LastExitCode }
        shell: powershell
        
      - name: Archive Test Results
        if: ${{ always() }}
        uses: actions/upload-artifact@c7d193f32edcb7bfad88892161225aeda64e9392 # v4.0.0
        with:
          name: test-results
          path: ${{ github.workspace }}\TestResults
          if-no-files-found: error

  run-artifactbuilder:
    needs: [ build-test-lambda ]
    if: ${{ github.event.release }}
    name: Run ArtifactBuilder
    runs-on: windows-2019
    
    env:
      artifacts_script_path: ${{ github.workspace }}\build

    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 0

      - name: Download NewRelic.OpenTracing.AmazonLambda.Tracer
        uses: actions/download-artifact@f44cd7b40bfd40b6aa1cc1b9b5b7bf03d3c67110 # v4.1.0
        with:
          name: NewRelic.OpenTracing.AmazonLambda.Tracer
          path: src/AwsLambda/AwsLambdaOpenTracer/bin/Release/netstandard2.0-ILRepacked

      - name: Run ArtifactBuilder
        run: |
          $configuration = "Release"
          $artifactBuilderCsproj = "${{ env.artifacts_script_path }}\ArtifactBuilder\ArtifactBuilder.csproj"
          & "${{ env.artifacts_script_path }}\generateBuildProperties.ps1" -outputPath "${{ env.artifacts_script_path }}\BuildArtifacts\_buildProperties"
          dotnet run --project "$artifactBuilderCsproj" NugetAwsLambdaOpenTracer $configuration
        shell: powershell

      - name: Archive Deploy Artifacts
        uses: actions/upload-artifact@c7d193f32edcb7bfad88892161225aeda64e9392 # v4.0.0
        with:
          name: deploy-artifacts
          path: |
            ${{ github.workspace }}\build\BuildArtifacts
          if-no-files-found: error
