services:

    # Cosmos is running on Azure; save in case we come back to using the emulator in Docker
    # cosmosdb:
    #     build: ./cosmosdb
    #     ports:
    #         - "8081:8081"
    #         - "10251-10254:10251-10254"
    #     environment:
    #         - AZURE_COSMOS_EMULATOR_KEY=${AZURE_COSMOS_EMULATOR_KEY:-C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==}
    #         - AZURE_COSMOS_EMULATOR_PARTITION_COUNT=${AZURE_COSMOS_EMULATOR_PARTITION_COUNT:-25}
    #         - AZURE_COSMOS_EMULATOR_ENABLE_DATA_PERSISTENCE=${AZURE_COSMOS_EMULATOR_ENABLE_DATA_PERSISTENCE:-false}
    #         - AZURE_COSMOS_EMULATOR_IP_ADDRESS_OVERRIDE=${AZURE_COSMOS_EMULATOR_IP_ADDRESS_OVERRIDE:-127.0.0.1}
    #     container_name: CosmosDbServer
    #     deploy:
    #         resources:
    #             limits:
    #                 cpus: '2.0'
    #                 memory: 3g

    rabbitmq:
        build: ./rabbitmq
        ports:
            - "5671-5672:5671-5672"
            - "15671-15672:15671-15672"
        hostname: my-rabbit
        environment:
            - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER:-RabbitUser}
            - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS:-RabbitPassword}
        container_name: RabbitmqServer

    mongodb32:
        build: ./mongodb32
        ports:
            - "27017:27017"
        environment:
            - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME:-MongoUser}
            - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD:-MongoPassword}
        container_name: MongoDB32Server

    mongodb60:
        build: ./mongodb60
        ports:
            - "27018:27017"
        environment:
            - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME:-MongoUser}
            - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD:-MongoPassword}
        container_name: MongoDB60Server

    redis:
        build: ./redis
        command: redis-server --requirepass ${REDIS_PASSWORD:-RedisPassword}
        ports:
            - "6379:6379"
        container_name: RedisServer

    couchbase:
        build: ./couchbase
        ports:
            - "8091-8095:8091-8095"
            - "11210:11210"
        environment:
            # These credentials are used to configure the Couchbase container 
            # for use by the integration tests.
            - COUCHBASE_ADMINISTRATOR_PASSWORD=${COUCHBASE_ADMINISTRATOR_PASSWORD:-CouchbasePassword}
        container_name: CouchbaseServer

    postgres:
        build: ./postgres
        ports:
            - "5432:5432"
        environment:
            # The username 'postgres' should not change since it needs to match
            # the same value in the 'database.sql' backup/restore file.
            # The password must match what is used in the connection string used by
            # the tests.
            - POSTGRES_USER=postgres
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-PostgresPassword}
        container_name: PostgresServer

    mssql:
        build:
            context: ./mssql
        ports:
            - "1433:1433"
        environment:
            # The password set here must match the password set in the connection
            # string being used by the MS SQL unbounded integration tests.
            - MSSQL_SA_PASSWORD=${MSSQL_SA_PASSWORD:-MssqlPassw0rd}
            - ACCEPT_EULA=Y
        container_name: MssqlServer

    oracle:
        build: ./oracle
        shm_size: 1g
        ports:
            - "1521:1521"
        environment:
            # The password set here must match the password set in the connection 
            # string being used by the Oracle unbounded integration tests
            - ORACLE_PWD=${ORACLE_PWD:-OraclePassword}
        container_name: OracleServer

    mysql:
        build: ./mysql
        command: mysqld --default-authentication-plugin=mysql_native_password
        ports:
            - "3306:3306"
        environment:
            # These credentials are only used to configure the MySql container 
            # for use by the integration tests. They must match the values from 
            # the connection string used by those tests
            - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD:-MysqlPassword}
        container_name: MySqlServer

    elastic9:
        build: ./elastic9
        ports:
            - 9202:9200
        environment:
            - ELASTIC_PASSWORD=${ELASTIC_PASSWORD:-ElasticPassword}
        ulimits:
            memlock:
                soft: -1
                hard: -1
        deploy:
            resources:
                limits:
                    memory: 2GB
        container_name: Elastic9Server

    elastic8:
        build: ./elastic8
        ports:
            - 9200:9200
        environment:
            - ELASTIC_PASSWORD=${ELASTIC_PASSWORD:-ElasticPassword}
        ulimits:
            memlock:
                soft: -1
                hard: -1
        deploy:
            resources:
                limits:
                    memory: 2GB
        container_name: Elastic8Server

    elastic7:
        build: ./elastic7
        ports:
            - 9201:9200
        environment:
            - ELASTIC_PASSWORD=${ELASTIC_PASSWORD:-ElasticPassword}
        ulimits:
            memlock:
                soft: -1
                hard: -1
        deploy:
            resources:
                limits:
                    memory: 2GB
        container_name: Elastic7Server

    # # have to manually set the password for kibana_user - use curl to hit the correct endpoint
    # kibana_pw_setup:
    #     image: curlimages/curl
    #     depends_on:
    #         - elastic
    #     deploy:
    #         restart_policy:
    #             condition: on-failure
    #     entrypoint: [ "sh", "-c", "sleep 10 && curl --user \"elastic:${ELASTIC_PASSWORD:-ElasticPassword}\" -X POST \"elastic:9200/_security/user/kibana_system/_password?pretty\" -H 'Content-Type: application/json' -d'{  \"password\" : \"${KIBANA_PASSWORD:-KibanaPassword}\"}'" ]
    #     container_name: KibanaPWSetup

    # kibana:
    #     depends_on:
    #         kibana_pw_setup:
    #              condition: service_completed_successfully
    #     image: kibana:8.6.2
    #     ports:
    #         - 5601:5601
    #     environment:
    #         - SERVERNAME=kibana
    #         - ELASTICSEARCH_HOSTS=http://elastic:9200
    #         - ELASTICSEARCH_USERNAME=kibana_system
    #         - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD:-KibanaPassword}
    #     container_name: Kibana
